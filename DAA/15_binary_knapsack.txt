#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

// Structure to represent an item
struct Item {
    int value;
    int weight;
};

// Function to solve the 0/1 knapsack problem
int knapsack(int capacity, const vector<Item>& items) {
    int n = items.size();
    // Create a 2D vector to store the maximum values that can be obtained for different capacities and items
    vector<vector<int>> dp(n + 1, vector<int>(capacity + 1, 0));

    // Fill the dp table
    for (int i = 1; i <= n; ++i) {
        for (int w = 1; w <= capacity; ++w) {
            if (items[i - 1].weight <= w) {
                // If the current item's weight is less than or equal to the current capacity,
                // we can either include it or exclude it, and we choose the maximum of these two options
                dp[i][w] = max(dp[i - 1][w], items[i - 1].value + dp[i - 1][w - items[i - 1].weight]);
            } else {
                // If the current item's weight exceeds the current capacity, we cannot include it
                dp[i][w] = dp[i - 1][w];
            }
        }
    }

    return dp[n][capacity]; // Return the maximum value that can be obtained
}

int main() {
    int capacity = 50; // Knapsack capacity
    vector<Item> items = {
        {60, 10}, // Item 1: Value = 60, Weight = 10
        {100, 20}, // Item 2: Value = 100, Weight = 20
        {120, 30} // Item 3: Value = 120, Weight = 30
    };

    // Calculate the maximum total value that can be obtained
    int maxValue = knapsack(capacity, items);

    cout << "Maximum total value: " << maxValue << endl;

    return 0;
}
