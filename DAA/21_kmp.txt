#include <iostream>
#include <string>
#include <vector>

using namespace std;

// Function to compute the LPS (Longest Proper Prefix which is also Suffix) array for the pattern
vector<int> computeLPS(const string& pattern) {
    int m = pattern.size();
    vector<int> lps(m, 0); // Initialize LPS array with zeros

    int len = 0; // Length of the previous longest prefix suffix

    int i = 1;
    while (i < m) {
        if (pattern[i] == pattern[len]) {
            ++len;
            lps[i] = len;
            ++i;
        } else {
            if (len != 0) {
                len = lps[len - 1]; // Backtrack to previous prefix
            } else {
                lps[i] = 0;
                ++i;
            }
        }
    }

    return lps;
}

// Function to search for occurrences of pattern in text using the KMP algorithm
vector<int> kmp(const string& text, const string& pattern) {
    int n = text.size();
    int m = pattern.size();

    vector<int> lps = computeLPS(pattern); // Compute LPS array for the pattern

    vector<int> indices; // Store indices of occurrences of pattern in text

    int i = 0; // Index for text
    int j = 0; // Index for pattern
    while (i < n) {
        if (pattern[j] == text[i]) {
            ++i;
            ++j;
        }
        if (j == m) {
            indices.push_back(i - j);
            j = lps[j - 1];
        } else if (i < n && pattern[j] != text[i]) {
            if (j != 0) {
                j = lps[j - 1];
            } else {
                ++i;
            }
        }
    }

    return indices;
}

int main() {
    string text = "ABABDABACDABABCABAB";
    string pattern = "ABABCABAB";

    vector<int> indices = kmp(text, pattern);

    cout << "Pattern found at indices: ";
    for (int index : indices) {
        cout << index << " ";
    }
    cout << endl;

    return 0;
}
