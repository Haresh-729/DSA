#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

// Structure to represent an item
struct Item {
    int value;
    int weight;
    double valuePerWeight; // Value per unit weight
};

// Function to compare items based on their value per weight
bool compareItems(const Item& item1, const Item& item2) {
    return item1.valuePerWeight > item2.valuePerWeight;
}

// Function to solve the fractional knapsack problem
double fractionalKnapsack(int capacity, vector<Item>& items) {
    // Sort items based on their value per weight in non-increasing order
    sort(items.begin(), items.end(), compareItems);

    double totalValue = 0.0;
    int remainingCapacity = capacity;

    // Iterate through sorted items
    for (const auto& item : items) {
        // If the remaining capacity is greater than the item's weight, take the whole item
        if (remainingCapacity >= item.weight) {
            totalValue += item.value;
            remainingCapacity -= item.weight;
        } else { // Otherwise, take a fraction of the item
            totalValue += item.valuePerWeight * remainingCapacity;
            break; // Knapsack is full
        }
    }

    return totalValue;
}

int main() {
    int capacity = 50; // Knapsack capacity
    vector<Item> items = {
        {60, 10}, // Item 1: Value = 60, Weight = 10
        {100, 20}, // Item 2: Value = 100, Weight = 20
        {120, 30} // Item 3: Value = 120, Weight = 30
    };

    // Calculate the maximum total value that can be obtained
    double maxValue = fractionalKnapsack(capacity, items);

    cout << "Maximum total value: " << maxValue << endl;

    return 0;
}
