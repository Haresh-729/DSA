#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

// Structure to represent an edge in the graph
struct Edge {
    int src, dest, weight;
};

// Structure to represent a subset for union-find
struct Subset {
    int parent, rank;
};

class Graph {
    int V;
    vector<Edge> edges;

public:
    Graph(int v) : V(v) {}

    // Add an edge to the graph
    void addEdge(int src, int dest, int weight) {
        edges.push_back({src, dest, weight});
    }

    // Find the subset of an element
    int find(vector<Subset>& subsets, int i) {
        if (subsets[i].parent != i)
            subsets[i].parent = find(subsets, subsets[i].parent);
        return subsets[i].parent;
    }

    // Perform union of two subsets
    void Union(vector<Subset>& subsets, int x, int y) {
        int xroot = find(subsets, x);
        int yroot = find(subsets, y);

        if (subsets[xroot].rank < subsets[yroot].rank)
            subsets[xroot].parent = yroot;
        else if (subsets[xroot].rank > subsets[yroot].rank)
            subsets[yroot].parent = xroot;
        else {
            subsets[yroot].parent = xroot;
            subsets[xroot].rank++;
        }
    }

    // Kruskal's algorithm
    void kruskalMST() {
        vector<Edge> result;

        // Sort all the edges in non-decreasing order of their weight
        sort(edges.begin(), edges.end(), [](const Edge& a, const Edge& b) {
            return a.weight < b.weight;
        });

        // Allocate memory for subsets
        vector<Subset> subsets(V);
        for (int i = 0; i < V; i++) {
            subsets[i].parent = i;
            subsets[i].rank = 0;
        }

        int e = 0, i = 0;

        // Number of edges to be taken is equal to V-1
        while (e < V - 1 && i < edges.size()) {
            Edge next_edge = edges[i++];
            int x = find(subsets, next_edge.src);
            int y = find(subsets, next_edge.dest);

            // If including this edge does not cause cycle, include it
            if (x != y) {
                result.push_back(next_edge);
                Union(subsets, x, y);
                e++;
            }
        }

        // Print the edges in the MST
        cout << "Edges in the Minimum Spanning Tree:" << endl;
        for (const auto& edge : result) {
            cout << edge.src << " -- " << edge.dest << " : " << edge.weight << endl;
        }
    }
};

int main() {
    int n;
    cout << "Enter the number of vertices: ";
    cin >> n;

    // Create a graph with n vertices
    Graph graph(n);

    // Input adjacency matrix
    cout << "Enter the adjacency matrix of the graph:" << endl;
    vector<vector<int>> matrix(n, vector<int>(n));
    for (int i = 0; i < n; ++i) {
        for (int j = 0; j < n; ++j) {
            cin >> matrix[i][j];
            if (matrix[i][j] != 0) {
                graph.addEdge(i, j, matrix[i][j]);
            }
        }
    }

    // Find Minimum Spanning Tree
    graph.kruskalMST();

    return 0;
}




#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

// Structure to represent an edge in the graph
struct Edge {
    int src, dest, weight;
};

// Structure to represent a subset for union-find
struct Subset {
    int parent, rank;
};

class Graph {
    int V;
    vector<Edge> edges;

public:
    Graph(int v) : V(v) {}

    // Add an edge to the graph
    void addEdge(int src, int dest, int weight) {
        edges.push_back({src, dest, weight});
    }

    // Find the subset of an element
    int find(vector<Subset>& subsets, int i) {
        if (subsets[i].parent != i)
            subsets[i].parent = find(subsets, subsets[i].parent);
        return subsets[i].parent;
    }

    // Perform union of two subsets
    void Union(vector<Subset>& subsets, int x, int y) {
        int xroot = find(subsets, x);
        int yroot = find(subsets, y);

        if (subsets[xroot].rank < subsets[yroot].rank)
            subsets[xroot].parent = yroot;
        else if (subsets[xroot].rank > subsets[yroot].rank)
            subsets[yroot].parent = xroot;
        else {
            subsets[yroot].parent = xroot;
            subsets[xroot].rank++;
        }
    }

    // Kruskal's algorithm
    void kruskalMST() {
        vector<Edge> result;

        // Sort all the edges in non-decreasing order of their weight
        sort(edges.begin(), edges.end(), [](const Edge& a, const Edge& b) {
            return a.weight < b.weight;
        });

        // Allocate memory for subsets
        vector<Subset> subsets(V);
        for (int i = 0; i < V; i++) {
            subsets[i].parent = i;
            subsets[i].rank = 0;
        }

        int e = 0, i = 0;

        // Number of edges to be taken is equal to V-1
        while (e < V - 1 && i < edges.size()) {
            Edge next_edge = edges[i++];
            int x = find(subsets, next_edge.src);
            int y = find(subsets, next_edge.dest);

            // If including this edge does not cause cycle, include it
            if (x != y) {
                result.push_back(next_edge);
                Union(subsets, x, y);
                e++;
            }
        }

        // Print the edges in the MST
        cout << "Edges in the Minimum Spanning Tree:" << endl;
        for (const auto& edge : result) {
            cout << edge.src << " -- " << edge.dest << " : " << edge.weight << endl;
        }
    }
};

int main() {
    // Example adjacency matrix
    vector<vector<int>> adjacencyMatrix = {
        {0, 2, 0, 6, 0},
        {2, 0, 3, 8, 5},
        {0, 3, 0, 0, 7},
        {6, 8, 0, 0, 9},
        {0, 5, 7, 9, 0}
    };
    int n = adjacencyMatrix.size();

    // Create a graph with n vertices
    Graph graph(n);

    // Add edges from the adjacency matrix
    for (int i = 0; i < n; ++i) {
        for (int j = i + 1; j < n; ++j) {
            if (adjacencyMatrix[i][j] != 0) {
                graph.addEdge(i, j, adjacencyMatrix[i][j]);
            }
        }
    }

    // Find Minimum Spanning Tree
    graph.kruskalMST();

    return 0;
}

