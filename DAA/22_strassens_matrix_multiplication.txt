#include <iostream>
#include <vector>

using namespace std;

// Function to add two matrices
vector<vector<int>> matrixAdd(const vector<vector<int>>& A, const vector<vector<int>>& B) {
    int n = A.size();
    vector<vector<int>> C(n, vector<int>(n, 0));

    for (int i = 0; i < n; ++i) {
        for (int j = 0; j < n; ++j) {
            C[i][j] = A[i][j] + B[i][j];
        }
    }

    return C;
}

// Function to subtract two matrices
vector<vector<int>> matrixSubtract(const vector<vector<int>>& A, const vector<vector<int>>& B) {
    int n = A.size();
    vector<vector<int>> C(n, vector<int>(n, 0));

    for (int i = 0; i < n; ++i) {
        for (int j = 0; j < n; ++j) {
            C[i][j] = A[i][j] - B[i][j];
        }
    }

    return C;
}

// Function to divide a matrix into four submatrices
void splitMatrix(const vector<vector<int>>& A, vector<vector<int>>& A11, vector<vector<int>>& A12,
                 vector<vector<int>>& A21, vector<vector<int>>& A22) {
    int n = A.size();
    int half = n / 2;

    for (int i = 0; i < half; ++i) {
        for (int j = 0; j < half; ++j) {
            A11[i][j] = A[i][j];
            A12[i][j] = A[i][j + half];
            A21[i][j] = A[i + half][j];
            A22[i][j] = A[i + half][j + half];
        }
    }
}

// Function to combine four submatrices into one matrix
void combineMatrix(vector<vector<int>>& C, const vector<vector<int>>& C11, const vector<vector<int>>& C12,
                   const vector<vector<int>>& C21, const vector<vector<int>>& C22) {
    int n = C.size();
    int half = n / 2;

    for (int i = 0; i < half; ++i) {
        for (int j = 0; j < half; ++j) {
            C[i][j] = C11[i][j];
            C[i][j + half] = C12[i][j];
            C[i + half][j] = C21[i][j];
            C[i + half][j + half] = C22[i][j];
        }
    }
}

// Function to perform Strassen's matrix multiplication
vector<vector<int>> strassenMatrixMultiply(const vector<vector<int>>& A, const vector<vector<int>>& B) {
    int n = A.size();

    // Base case: If the matrix size is 1x1, perform simple multiplication
    if (n == 1) {
        return {{A[0][0] * B[0][0]}};
    }

    // Divide matrices into submatrices
    vector<vector<int>> A11(n / 2, vector<int>(n / 2, 0)), A12(n / 2, vector<int>(n / 2, 0));
    vector<vector<int>> A21(n / 2, vector<int>(n / 2, 0)), A22(n / 2, vector<int>(n / 2, 0));
    vector<vector<int>> B11(n / 2, vector<int>(n / 2, 0)), B12(n / 2, vector<int>(n / 2, 0));
    vector<vector<int>> B21(n / 2, vector<int>(n / 2, 0)), B22(n / 2, vector<int>(n / 2, 0));

    splitMatrix(A, A11, A12, A21, A22);
    splitMatrix(B, B11, B12, B21, B22);

    // Strassen's algorithm steps
    vector<vector<int>> M1 = strassenMatrixMultiply(matrixAdd(A11, A22), matrixAdd(B11, B22));
    vector<vector<int>> M2 = strassenMatrixMultiply(matrixAdd(A21, A22), B11);
    vector<vector<int>> M3 = strassenMatrixMultiply(A11, matrixSubtract(B12, B22));
    vector<vector<int>> M4 = strassenMatrixMultiply(A22, matrixSubtract(B21, B11));
    vector<vector<int>> M5 = strassenMatrixMultiply(matrixAdd(A11, A12), B22);
    vector<vector<int>> M6 = strassenMatrixMultiply(matrixSubtract(A21, A11), matrixAdd(B11, B12));
    vector<vector<int>> M7 = strassenMatrixMultiply(matrixSubtract(A12, A22), matrixAdd(B21, B22));

    // Compute submatrices of the result matrix
    vector<vector<int>> C11 = matrixAdd(matrixSubtract(matrixAdd(M1, M4), M5), M7);
    vector<vector<int>> C12 = matrixAdd(M3, M5);
    vector<vector<int>> C21 = matrixAdd(M2, M4);
    vector<vector<int>> C22 = matrixAdd(matrixSubtract(matrixAdd(M1, M3), M2), M6);

    // Combine submatrices into the result matrix
    vector<vector<int>> C(n, vector<int>(n, 0));
    combineMatrix(C, C11, C12, C21, C22);

    return C;
}

// Function to print a matrix
void printMatrix(const vector<vector<int>>& matrix) {
    for (const auto& row : matrix) {
        for (int elem : row) {
            cout << elem << " ";
        }
        cout << endl;
    }
}

int main() {
    vector<vector<int>> A = {{1, 2}, {3, 4}};
    vector<vector<int>> B = {{5, 6}, {7, 8}};

    cout << "Matrix A:" << endl;
    printMatrix(A);
    cout << "Matrix B:" << endl;
    printMatrix(B);

    vector<vector<int>> C = strassenMatrixMultiply(A, B);

    cout << "Resultant Matrix C:" << endl;
    printMatrix(C);

    return 0;
}
