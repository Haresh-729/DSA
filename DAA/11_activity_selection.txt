#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

// Structure to represent an activity
struct Activity {
    int start, finish;
};

// Function to compare activities based on their finishing time
bool compareActivities(const Activity& a, const Activity& b) {
    return a.finish < b.finish;
}

// Function to perform activity selection
void activitySelection(const vector<Activity>& activities) {
    vector<Activity> selectedActivities;

    // Sort activities based on their finishing time
    vector<Activity> sortedActivities = activities;
    sort(sortedActivities.begin(), sortedActivities.end(), compareActivities);

    // Select the first activity
    selectedActivities.push_back(sortedActivities[0]);

    // Iterate through the sorted activities
    for (size_t i = 1; i < sortedActivities.size(); ++i) {
        // If the current activity's start time is after the finish time of the last selected activity, select it
        if (sortedActivities[i].start >= selectedActivities.back().finish) {
            selectedActivities.push_back(sortedActivities[i]);
        }
    }

    // Print selected activities
    cout << "Selected Activities:" << endl;
    for (const auto& activity : selectedActivities) {
        cout << "Start: " << activity.start << ", Finish: " << activity.finish << endl;
    }
}

int main() {
    // Example activities
    vector<Activity> activities = {
        {1, 4},
        {3, 5},
        {0, 6},
        {5, 7},
        {3, 8},
        {5, 9},
        {6, 10},
        {8, 11},
        {8, 12},
        {2, 13},
        {12, 14}
    };

    // Perform activity selection
    activitySelection(activities);

    return 0;
}
