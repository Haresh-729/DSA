#include<stdio.h>
    #include<conio.h>
    #include<string.h>
    #define Max 50
    #include <ctype.h>
    #define SIZE 50            /* Size of Stack */
    int s[SIZE];

    int TOS=-1,TOP=0;
    int top=-1;       /* Global declarations */

    char infix[Max],post[Max],stack[Max];
    void push(char);
    void infix_post();
    char pop();
    int precedence(char ch);
    void main()
    {
     printf("\n enter the expression  " );
     fflush(stdin);
     gets(infix);
     strcat(infix,")");
     infix_post();
     printf("\n  Postfix exp. is ::>> %s",post);
     postfix_convert(post);
    }
    void infix_post()
    {
      int i=0;
      char temp;
      push('(');
      while(infix[i]!='\0')
      {
           if(isdigit(infix[i]) )
           {
    post[TOP++]=infix[i];
           }
           else
           {
     switch(infix[i])
     {
        case '(':
    push(infix[i]);
    break;
        case ')':
    temp=pop();
    while(temp!='(')
    {
      post[TOP++]=temp;
      temp=pop();
    }
    break;
        case '+':
        case '-':
        case '*':
        case '/':
        case '%':
        case '$':
        case '^':
          while(precedence(infix[i])<=precedence(stack[TOS]))
          {
       temp=pop();
       post[TOP++]=temp;
          }
          push(infix[i]);
          break;

        default:
        break;
     } // switch

           }// else
      i++;
      } // while
      post[TOP]='\0';
    }// main
    void push(char ch)
    {

      if(TOS==Max-1)
      {
        printf("\n overflow");
        getch();
        return;
      }
      else
      {
        stack[++TOS]=ch;
      }
    }
    char pop()
    {
      if(TOS==-1)
      {
        printf("\n underflow");
        return -1;
      }
      else
      return(stack[TOS--]);
    }

    int precedence(char ch)
    {
       if(ch=='+'||ch=='-')
       return 1;
       else if(ch=='%'||ch=='/'||ch=='*')
       return 2;
       else if (ch=='$'||ch=='^')
       return 3;
       else
       return 0;
    }
    push_p(int elem)
    {                       /* Function for PUSH operation */
        s[++top]=elem;
    }

    int pop_p()
    {                      /* Function for POP operation */
        return(s[top--]);
    }

    postfix_convert(char pofx[Max])
    {                         /* Main Program */
        char ch;
        int i=0,op1,op2;
        printf("\n\n Postfix Expression ? %s",pofx);
        while( (ch=pofx[i++]) != '\0')
        {
    if(isdigit(ch))
    push_p(ch-'0'); /* Push the operand */
    else
    {        /* Operator,pop two  operands */
      op2=pop_p();
      op1=pop_p();
       switch(ch)
       {
       case '+':push_p(op1+op2);break;
       case '-':push_p(op1-op2);break;
       case '*':push_p(op1*op2);break;
       case '/':push_p(op1/op2);break;
       }
    }
        }
        printf("\n Given Postfix Expn: %s\n",pofx);
        printf("\n Result after Evaluation: %d\n",s[top]);
    }















#include <stdio.h>
#include <conio.h>
#include <string.h>
#include <ctype.h>
#define Max 50
#define SIZE 50 /* Size of Stack */

int s[SIZE];
int top = -1; /* Global declarations */

void push_p(int elem) { /* Function for PUSH operation */
    s[++top] = elem;
}

int pop_p() { /* Function for POP operation */
    return (s[top--]);
}

int postfix_evaluate(char pofx[Max]) { /* Function to evaluate postfix expression */
    char ch;
    int i = 0, op1, op2;

    while ((ch = pofx[i++]) != '\0') {
        if (isdigit(ch)) {
            push_p(ch - '0'); /* Push the operand */
        } else { /* Operator, pop two operands */
            op2 = pop_p();
            op1 = pop_p();
            switch (ch) {
                case '+':
                    push_p(op1 + op2);
                    break;
                case '-':
                    push_p(op1 - op2);
                    break;
                case '*':
                    push_p(op1 * op2);
                    break;
                case '/':
                    push_p(op1 / op2);
                    break;
            }
        }
    }
    return s[top]; /* The final result after evaluation */
}

int main() {
    char post[Max];
    
    printf("\nEnter the postfix expression: ");
    fflush(stdin);
    gets(post);
    
    int result = postfix_evaluate(post);
    
    printf("\nResult after evaluation: %d\n", result);
    
    return 0;
}











#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

#define Max 50
#define SIZE 50 /* Size of Stack */

int s[SIZE];
int top = -1; /* Global declarations */

void push_p(int elem) { /* Function for PUSH operation */
    s[++top] = elem;
}

int pop_p() { /* Function for POP operation */
    return s[top--];
}

int isOperator(char ch) {
    return (ch == '+' || ch == '-' || ch == '*' || ch == '/');
}

int postfix_evaluate(char pofx[Max]) { /* Function to evaluate postfix expression */
    char* token = strtok(pofx, " ");
    while (token != NULL) {
        if (isdigit(token[0])) {
            int operand = atoi(token);
            push_p(operand);
        } else if (isOperator(token[0])) {
            int op2 = pop_p();
            int op1 = pop_p();
            switch (token[0]) {
                case '+':
                    push_p(op1 + op2);
                    break;
                case '-':
                    push_p(op1 - op2);
                    break;
                case '*':
                    push_p(op1 * op2);
                    break;
                case '/':
                    if (op2 != 0) {
                        push_p(op1 / op2);
                    } else {
                        printf("Error: Division by zero\n");
                        return 0;
                    }
                    break;
            }
        }
        token = strtok(NULL, " ");
    }
    return s[top]; /* The final result after evaluation */
}

int main() {
    char post[Max];
    
    printf("\nEnter the postfix expression (use spaces to separate numbers and operators): ");
    fflush(stdin);
    gets(post);
    
    int result = postfix_evaluate(post);
    
    printf("\nResult after evaluation: %d\n", result);
    
    return 0;
}
