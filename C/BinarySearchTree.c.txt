#include <stdio.h>
#include <stdlib.h>

// Structure for a node in the Binary Search Tree
struct Node {
    int data;
    struct Node* left;
    struct Node* right;
};

// Function to create a new node
struct Node* createNode(int value) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = value;
    newNode->left = newNode->right = NULL;
    return newNode;
}

// Function to insert a value into the BST
struct Node* insert(struct Node* root, int value) {
    if (root == NULL) {
        return createNode(value);
    }
    
    if (value < root->data) {
        root->left = insert(root->left, value);
    } else if (value > root->data) {
        root->right = insert(root->right, value);
    }
    
    return root;
}

// Function to perform in-order traversal of the BST
void inOrderTraversal(struct Node* root) {
    if (root != NULL) {
        inOrderTraversal(root->left);
        printf("%d ", root->data);
        inOrderTraversal(root->right);
    }
}

// Function to find the node with the smallest value in a subtree
struct Node* findMinNode(struct Node* node) {
    struct Node* current = node;
    while (current && current->left != NULL) {
        current = current->left;
    }
    return current;
}

struct Node* deleteNode(struct Node* root, int value) {
    if (root == NULL) {
        return root;
    }

    if (value < root->data) {
        root->left = deleteNode(root->left, value);
    } else if (value > root->data) {
        root->right = deleteNode(root->right, value);
    } else {
        // Node with only one child or no child
        if (root->left == NULL) {
            struct Node* temp = root->right;
            free(root);
            return temp;
        } else if (root->right == NULL) {
            struct Node* temp = root->left;
            free(root);
            return temp;
        }

        // Node with two children
        struct Node* temp = findMinNode(root->right);
        root->data = temp->data;
        root->right = deleteNode(root->right, temp->data);
    }

    return root;
}

int main() {
    struct Node* root = NULL;
    int option = 0;
    while(option !=9)
    {
        printf("Choose the choice: \n1. Create Binary Search Tree\n2. Delete Node\n3. Display\n");
        scanf("%d", &option);
        switch(option)
        {
            case 1:
                // Insert values into the BST
                int range;
                printf("Enter number of elements you want to insert :");
                scanf("%d", &range);
                printf("%d", range);
                int input[10];
                for(int i=0; i< range; i++)
                {
                    printf("Enter data for %d elemnet ", i+1);
                    scanf("%d", &input[i]);
                }
                
                for(int i=0; i< range; i++)
                {
                    root = insert(root, input[i]);
                }
                break;
            case 2:
                //Delete Node
                int data = 0;
                printf("Enter data to be deleted : ");
                scanf("%d", &data);
                root = deleteNode(root, data);
                break;
            case 3:
                //Display\
                // Perform in-order traversal
                printf("In-order Traversal of the BST: ");
                inOrderTraversal(root);
                printf("\n");
        };
    }

    return 0;
}
