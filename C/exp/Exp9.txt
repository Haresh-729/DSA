#include <stdio.h>
#include <stdlib.h>

// Function declarations
int binarySearch(int arr[], int low, int high, int key);
int fibonacciSearch(int arr[], int n, int key);
void selectionSort(int arr[], int n);
void merge(int arr[], int l, int m, int r);
void mergeSort(int arr[], int l, int r);
int partition(int arr[], int low, int high);
void quickSort(int arr[], int low, int high);

// Function to display an array
void displayArray(int arr[], int n) {
    printf("Array: ");
    for (int i = 0; i < n; i++) {
        printf("%d ", arr[i]);
    }
    printf("\n");
}

// Function to display the menu
void displayMenu() {
    printf("\nSorting and Searching Menu:\n");
    printf("1. Binary Search\n");
    printf("2. Fibonacci Search\n");
    printf("3. Selection Sort\n");
    printf("4. Merge Sort\n");
    printf("5. Quick Sort\n");
    printf("6. Exit\n");
    printf("Enter your choice: ");
}

int main() {
    int n, key;
    printf("Enter the size of the array: ");
    scanf("%d", &n);

    int arr[n];
    printf("Enter %d elements:\n", n);
    for (int i = 0; i < n; i++) {
        scanf("%d", &arr[i]);
    }

    int choice;
    do {
        displayMenu();
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printf("Enter the key to search: ");
                scanf("%d", &key);
                selectionSort(arr, n);
                displayArray(arr, n);
                printf("Binary Search Result: %d\n", binarySearch(arr, 0, n - 1, key));
                break;

            case 2:
                printf("Enter the key to search: ");
                scanf("%d", &key);
                selectionSort(arr, n);
                displayArray(arr, n);
                printf("Fibonacci Search Result: %d\n", fibonacciSearch(arr, n, key));
                break;

            case 3:
                selectionSort(arr, n);
                printf("Array after Selection Sort: ");
                displayArray(arr, n);
                break;

            case 4:
                mergeSort(arr, 0, n - 1);
                printf("Array after Merge Sort: ");
                displayArray(arr, n);
                break;

            case 5:
                quickSort(arr, 0, n - 1);
                printf("Array after Quick Sort: ");
                displayArray(arr, n);
                break;

            case 6:
                printf("Exiting the program.\n");
                break;

            default:
                printf("Invalid choice. Please enter a valid option.\n");
        }

    } while (choice != 6);

    return 0;
}

// Binary Search
int binarySearch(int arr[], int low, int high, int key) {
    while (low <= high) {
        int mid = low + (high - low) / 2;
        if (arr[mid] == key) {
            return mid;
        } else if (arr[mid] < key) {
            low = mid + 1;
        } else {
            high = mid - 1;
        }
    }
    return -1; // Key not found
}

// Fibonacci Search
int fibonacciSearch(int arr[], int n, int key) {
    int fibM2 = 0;
    int fibM1 = 1;
    int fib = fibM1 + fibM2;

    while (fib < n) {
        fibM2 = fibM1;
        fibM1 = fib;
        fib = fibM1 + fibM2;
    }

    int offset = -1;

    while (fib > 1) {
        int i = (offset + fibM2 < n - 1) ? offset + fibM2 : n - 1;

        if (arr[i] < key) {
            fib = fibM1;
            fibM1 = fibM2;
            fibM2 = fib - fibM1;
            offset = i;
        } else if (arr[i] > key) {
            fib = fibM2;
            fibM1 = fibM1 - fibM2;
            fibM2 = fib - fibM1;
        } else {
            return i;
        }
    }

    if (fibM1 && arr[offset + 1] == key) {
        return offset + 1;
    }

    return -1; // Key not found
}

// Selection Sort
void selectionSort(int arr[], int n) {
    for (int i = 0; i < n - 1; i++) {
        int minIndex = i;
        for (int j = i + 1; j < n; j++) {
            if (arr[j] < arr[minIndex]) {
                minIndex = j;
            }
        }
        // Swap the found minimum element with the first element
        int temp = arr[minIndex];
        arr[minIndex] = arr[i];
        arr[i] = temp;
    }
}

// Merge Sort
void merge(int arr[], int l, int m, int r) {
    int i, j, k;
    int n1 = m - l + 1;
    int n2 = r - m;

    int L[n1], R[n2];

    for (i = 0; i < n1; i++)
        L[i] = arr[l + i];
    for (j = 0; j < n2; j++)
        R[j] = arr[m + 1 + j];

    i = 0;
    j = 0;
    k = l;
    while (i < n1 && j < n2) {
        if (L[i] <= R[j]) {
            arr[k] = L[i];
            i++;
        } else {
            arr[k] = R[j];
            j++;
        }
        k++;
    }

    while (i < n1) {
        arr[k] = L[i];
        i++;
        k++;
    }

    while (j < n2) {
        arr[k] = R[j];
        j++;
        k++;
    }
}

void mergeSort(int arr[], int l, int r) {
    if (l < r) {
        int m = l + (r - l) / 2;

        mergeSort(arr, l, m);
        mergeSort(arr, m + 1, r);

        merge(arr, l, m, r);
    }
}

// Quick Sort
int partition(int arr[], int low, int high) {
    int pivot = arr[high];
    int i = low - 1;

    for (int j = low; j <= high - 1; j++) {
        if (arr[j] < pivot) {
            i++;
            // Swap arr[i] and arr[j]
            int temp = arr[i];
            arr[i] = arr[j];
                        arr[j] = temp;
        }
    }

    // Swap arr[i+1] and arr[high]
    int temp = arr[i + 1];
    arr[i + 1] = arr[high];
    arr[high] = temp;

    return i + 1;
}

void quickSort(int arr[], int low, int high) {
    if (low < high) {
        // pi is the partitioning index, arr[pi] is now at the right place
        int pi = partition(arr, low, high);

        // Separately sort the elements before and after the partition
        quickSort(arr, low, pi - 1);
        quickSort(arr, pi + 1, high);
    }
}

