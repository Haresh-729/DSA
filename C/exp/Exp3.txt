#include <stdio.h>
#include <stdlib.h>

// Node structure for a term in the polynomial
struct Node {
    int coefficient;
    int exponent;
    struct Node* next;
};

// Function to create a new node
struct Node* createNode(int coeff, int exp) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    if (!newNode) {
        printf("Memory allocation failed.\n");
        exit(EXIT_FAILURE);
    }
    newNode->coefficient = coeff;
    newNode->exponent = exp;
    newNode->next = NULL;
    return newNode;
}

// Function to insert a term into the polynomial
void insertTerm(struct Node** poly, int coeff, int exp) {
    struct Node* newNode = createNode(coeff, exp);
    newNode->next = *poly;
    *poly = newNode;
}

// Function to display a polynomial
void displayPoly(struct Node* poly) {
    while (poly != NULL) {
        printf("%dx^%d", poly->coefficient, poly->exponent);
        poly = poly->next;
        if (poly != NULL) {
            printf(" + ");
        }
    }
    printf("\n");
}

// Function to add two polynomials
struct Node* addPolynomials(struct Node* poly1, struct Node* poly2) {
    struct Node* result = NULL;

    while (poly1 != NULL && poly2 != NULL) {
        if (poly1->exponent > poly2->exponent) {
            insertTerm(&result, poly1->coefficient, poly1->exponent);
            poly1 = poly1->next;
        } else if (poly1->exponent < poly2->exponent) {
            insertTerm(&result, poly2->coefficient, poly2->exponent);
            poly2 = poly2->next;
        } else {
            // Exponents are equal, add coefficients
            int sumCoeff = poly1->coefficient + poly2->coefficient;
            insertTerm(&result, sumCoeff, poly1->exponent);
            poly1 = poly1->next;
            poly2 = poly2->next;
        }
    }

    // Copy remaining terms from poly1
    while (poly1 != NULL) {
        insertTerm(&result, poly1->coefficient, poly1->exponent);
        poly1 = poly1->next;
    }

    // Copy remaining terms from poly2
    while (poly2 != NULL) {
        insertTerm(&result, poly2->coefficient, poly2->exponent);
        poly2 = poly2->next;
    }

    return result;
}

// Function to subtract two polynomials
struct Node* subtractPolynomials(struct Node* poly1, struct Node* poly2) {
    struct Node* result = NULL;

    while (poly1 != NULL && poly2 != NULL) {
        if (poly1->exponent > poly2->exponent) {
            insertTerm(&result, poly1->coefficient, poly1->exponent);
            poly1 = poly1->next;
        } else if (poly1->exponent < poly2->exponent) {
            insertTerm(&result, -poly2->coefficient, poly2->exponent);
            poly2 = poly2->next;
        } else {
            // Exponents are equal, subtract coefficients
            int diffCoeff = poly1->coefficient - poly2->coefficient;
            insertTerm(&result, diffCoeff, poly1->exponent);
            poly1 = poly1->next;
            poly2 = poly2->next;
        }
    }

    // Copy remaining terms from poly1
    while (poly1 != NULL) {
        insertTerm(&result, poly1->coefficient, poly1->exponent);
        poly1 = poly1->next;
    }

    // Copy remaining terms from poly2
    while (poly2 != NULL) {
        insertTerm(&result, -poly2->coefficient, poly2->exponent);
        poly2 = poly2->next;
    }

    return result;
}

// Function to free the memory allocated for a polynomial
void freePoly(struct Node* poly) {
    struct Node* temp;
    while (poly != NULL) {
        temp = poly;
         poly = poly->next;
        free(temp);
    }
}

int main() {
    struct Node* poly1 = NULL;
    struct Node* poly2 = NULL;

    printf("Enter coefficients for the first polynomial in descending order of powers:\n");
    int coeff1, exp1;
    do {
        printf("Coefficient: ");
        scanf("%d", &coeff1);
        if (coeff1 == 0) {
            break; // End of the polynomial
        }
        printf("Exponent: ");
        scanf("%d", &exp1);
        insertTerm(&poly1, coeff1, exp1);
    } while (1);

    printf("Enter coefficients for the second polynomial in descending order of powers:\n");
    int coeff2, exp2;
    do {
        printf("Coefficient: ");
        scanf("%d", &coeff2);
        if (coeff2 == 0) {
            break; // End of the polynomial
        }
        printf("Exponent: ");
        scanf("%d", &exp2);
        insertTerm(&poly2, coeff2, exp2);
    } while (1);

    printf("Polynomial 1: ");
    displayPoly(poly1);

    printf("Polynomial 2: ");
    displayPoly(poly2);

    // Add polynomials and display the result
    struct Node* sumResult = addPolynomials(poly1, poly2);
    printf("Sum: ");
    displayPoly(sumResult);

    // Subtract polynomials and display the result
    struct Node* diffResult = subtractPolynomials(poly1, poly2);
    printf("Difference: ");
    displayPoly(diffResult);

    // Free the memory allocated for the polynomials
    freePoly(poly1);
    freePoly(poly2);
    freePoly(sumResult);
    freePoly(diffResult);

    return 0;
}