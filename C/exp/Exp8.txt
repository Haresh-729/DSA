#include <stdio.h>
#include <stdlib.h>

// Maximum number of vertices in the graph
#define MAX_VERTICES 10

// Structure to represent a graph
struct Graph {
    int vertices;
    int adjacencyMatrix[MAX_VERTICES][MAX_VERTICES];
};

// Function prototypes
void initializeGraph(struct Graph* graph);
void addEdge(struct Graph* graph, int start, int end);
void displayGraph(struct Graph* graph);
void bfs(struct Graph* graph, int startVertex);
void dfs(struct Graph* graph, int startVertex, int visited[MAX_VERTICES]);

int main() {
    struct Graph graph;
    int choice, startVertex;

    initializeGraph(&graph);

    do {
        // Menu
        printf("\nGraph Menu:\n");
        printf("1. Add Edge\n");
        printf("2. Display Graph\n");
        printf("3. Breadth-First Search (BFS)\n");
        printf("4. Depth-First Search (DFS)\n");
        printf("5. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                {
                    int start, end;
                    printf("Enter the start and end vertices of the edge: ");
                    scanf("%d %d", &start, &end);
                    addEdge(&graph, start, end);
                }
                break;

            case 2:
                displayGraph(&graph);
                break;

            case 3:
                printf("Enter the start vertex for BFS: ");
                scanf("%d", &startVertex);
                bfs(&graph, startVertex);
                break;

            case 4:
                {
                    int visited[MAX_VERTICES] = {0};
                    printf("Enter the start vertex for DFS: ");
                    scanf("%d", &startVertex);
                    dfs(&graph, startVertex, visited);
                }
                break;

            case 5:
                printf("Exiting program.\n");
                break;

            default:
                printf("Invalid choice. Please enter a valid option.\n");
        }
    } while (choice != 5);

    return 0;
}

// Function to initialize the graph
void initializeGraph(struct Graph* graph) {
    graph->vertices = 0;

    for (int i = 0; i < MAX_VERTICES; ++i) {
        for (int j = 0; j < MAX_VERTICES; ++j) {
            graph->adjacencyMatrix[i][j] = 0;
        }
    }
}

// Function to add an edge to the graph
void addEdge(struct Graph* graph, int start, int end) {
    if (start < 0 || start >= MAX_VERTICES || end < 0 || end >= MAX_VERTICES) {
        printf("Invalid vertices. Please enter vertices between 0 and %d.\n", MAX_VERTICES - 1);
        return;
    }

    graph->adjacencyMatrix[start][end] = 1;
    graph->adjacencyMatrix[end][start] = 1;

    // Update the number of vertices if needed
    if (start >= graph->vertices) {
        graph->vertices = start + 1;
    }

    if (end >= graph->vertices) {
        graph->vertices = end + 1;
    }

    printf("Edge added between vertices %d and %d.\n", start, end);
}

// Function to display the graph
void displayGraph(struct Graph* graph) {
    printf("Adjacency Matrix:\n");

    for (int i = 0; i < graph->vertices; ++i) {
        for (int j = 0; j < graph->vertices; ++j) {
            printf("%d ", graph->adjacencyMatrix[i][j]);
        }
        printf("\n");
    }
}

// Function to perform breadth-first search (BFS)
void bfs(struct Graph* graph, int startVertex) {
    // Implementation of BFS goes here
    // This is just a placeholder
    printf("BFS traversal starting from vertex %d.\n", startVertex);
}

// Function to perform depth-first search (DFS)
void dfs(struct Graph* graph, int startVertex, int visited[MAX_VERTICES]) {
    // Implementation of DFS goes here
    // This is just a placeholder
    printf("DFS traversal starting from vertex %d.\n", startVertex);
}
